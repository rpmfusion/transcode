--- transcode-1.0.2/import/import_lzo.c~	2005-07-04 10:09:33.000000000 +0300
+++ transcode-1.0.2/import/import_lzo.c	2006-07-26 20:50:50.000000000 +0300
@@ -22,10 +22,12 @@
  */
 
 #define MOD_NAME    "import_lzo.so"
-#define MOD_VERSION "v0.0.3 (2002-11-26)"
+#define MOD_VERSION "v0.1.0 (2005-10-16)"
 #define MOD_CODEC   "(video) LZO"
 
 #include "transcode.h"
+#include "magic.h"
+#include "export/tc_lzo.h"
 
 static int verbose_flag = TC_QUIET;
 static int capability_flag = TC_CAP_PCM | TC_CAP_YUV | TC_CAP_RGB |
@@ -34,15 +36,14 @@
 #define MOD_PRE lzo
 #include "import_def.h"
 
-#include <lzo1x.h>
-#if (LZO_VERSION > 0x1070)
-#  include <lzoutil.h>
-#endif
+#include <lzo/lzo1x.h>
+#include <lzo/lzoutil.h>
 
 
 static avi_t *avifile1=NULL;
 static avi_t *avifile2=NULL;
 
+static uint32_t video_codec;
 static int audio_codec;
 static int aframe_count=0, vframe_count=0;
 
@@ -103,6 +104,14 @@
     fps    =  AVI_frame_rate(avifile2);
     codec  =  AVI_video_compressor(avifile2);
 
+    if (strcmp(codec,"LZO1") == 0) {
+      video_codec = TC_CODEC_LZO1;
+    } else if (strcmp(codec,"LZO2") == 0) {
+      video_codec = TC_CODEC_LZO2;
+    } else {
+      fprintf(stderr, "[%s] Unsupported video codec %s", MOD_NAME, codec);
+      return(TC_IMPORT_ERROR); 
+    }
 
     fprintf(stderr, "[%s] codec=%s, fps=%6.3f, width=%d, height=%d\n", 
 	    MOD_NAME, codec, fps, width, height);
@@ -142,7 +151,7 @@
 {
 
   int key;
-
+  lzo_uint size;
   long bytes_read=0;
 
   if(param->flag == TC_VIDEO) {
@@ -160,7 +169,24 @@
       return(TC_IMPORT_ERROR);
     }
 
-    r = lzo1x_decompress(out, out_len, param->buffer, &param->size, wrkmem);
+    if (video_codec == TC_CODEC_LZO1) {
+      r = lzo1x_decompress(out, out_len, param->buffer, &size, wrkmem);
+    } else {
+      tc_lzo_header_t *h = (tc_lzo_header_t *)out;
+      uint8_t *compdata = out + sizeof(*h);
+      int compsize = out_len - sizeof(*h);
+      if (h->magic != video_codec) {
+	fprintf(stderr, "[%s] frame with invalid magic 0x%08X\n", MOD_NAME, h->magic);
+	return (TC_IMPORT_ERROR);
+      }
+      if (h->flags & TC_LZO_NOT_COMPRESSIBLE) {
+	tc_memcpy(param->buffer, compdata, compsize);
+	size = compsize;
+	r = LZO_E_OK;
+      } else {
+	r = lzo1x_decompress(compdata, compsize, param->buffer, &size, wrkmem);
+      }
+    }
 
     if (r == LZO_E_OK) {
       if(verbose & TC_DEBUG) printf("decompressed %lu bytes into %lu bytes\n",
@@ -172,6 +198,7 @@
       return(TC_IMPORT_ERROR); 
     }
 
+    param->size = size;
     //transcode v.0.5.0-pre8 addition
     if(key) param->attributes |= TC_FRAME_IS_KEYFRAME;
 
--- transcode-1.0.2/import/decode_lzo.c~	2005-07-04 10:09:33.000000000 +0300
+++ transcode-1.0.2/import/decode_lzo.c	2006-07-26 20:50:55.000000000 +0300
@@ -27,10 +27,8 @@
 
 #ifdef HAVE_LZO
 
-#include <lzo1x.h>
-#if (LZO_VERSION > 0x1070)
-#  include <lzoutil.h>
-#endif
+#include <lzo/lzo1x.h>
+#include <lzo/lzoutil.h>
 
 #include "export/tc_lzo.h"
 
@@ -100,8 +98,13 @@
 	    goto decoder_error;
 	}
 
-
-	r = lzo1x_decompress(inbuf, bytes, out, &out_len, wrkmem);
+	if (h.flags & TC_LZO_NOT_COMPRESSIBLE) {
+	  tc_memcpy(out, inbuf, bytes);
+	  out_len = bytes;
+	  r = LZO_E_OK;
+	} else {
+	  r = lzo1x_decompress(inbuf, bytes, out, &out_len, wrkmem);
+	}
 
 	if (r == LZO_E_OK) {
 	    if(verbose & TC_DEBUG) 
--- transcode-1.0.2/import/extract_lzo.c~	2005-07-04 10:09:33.000000000 +0300
+++ transcode-1.0.2/import/extract_lzo.c	2006-07-26 20:50:52.000000000 +0300
@@ -27,10 +27,8 @@
 
 #ifdef HAVE_LZO
 
-#include <lzo1x.h>
-#if (LZO_VERSION > 0x1070)
-#  include <lzoutil.h>
-#endif
+#include <lzo/lzo1x.h>
+#include <lzo/lzoutil.h>
 
 #define BUFFER_SIZE SIZE_RGB_FRAME<<1
 
--- transcode-1.0.2/configure.in~	2005-10-30 06:57:45.000000000 +0200
+++ transcode-1.0.2/configure.in	2006-07-26 20:51:02.000000000 +0300
@@ -1018,7 +1018,7 @@
 dnl
 dnl LZO
 dnl
-TC_PKG_CHECK(lzo, no, LZO, no, [lzo1x.h], lzo, lzo_version, lzo,
+TC_PKG_CHECK(lzo, no, LZO, no, [lzo/lzo1x.h], lzo2, lzo_version, lzo,
  [http://www.oberhumer.com/opensource/lzo/])
 TC_PKG_HAVE(lzo, LZO)
 
--- transcode-1.0.2/export/tc_lzo.h~	2005-07-04 10:15:57.000000000 +0300
+++ transcode-1.0.2/export/tc_lzo.h	2006-07-26 20:50:58.000000000 +0300
@@ -1,7 +1,6 @@
 #ifndef TC_LZO_H
 #define TC_LZO_H
 
-#define TC_LZO_MAGIC 0x4C5A4F32   /* LZO2 */
 
 #define TC_LZO_FORMAT_YV12    1
 #define TC_LZO_FORMAT_RGB24   2
@@ -14,6 +13,7 @@
     unsigned int flags;
     unsigned char method; /* compression method */
     unsigned char level;  /* compression level */
+    short pad;
 } tc_lzo_header_t;
 
 #endif /* TC_LZO_H */
--- transcode-1.0.2/export/export_lzo.c~	2005-07-04 10:09:31.000000000 +0300
+++ transcode-1.0.2/export/export_lzo.c	2006-07-26 20:51:00.000000000 +0300
@@ -29,20 +29,13 @@
 #include "aud_aux.h"
 #include "import/magic.h"
 
-#include <lzo1x.h>
-#if (LZO_VERSION > 0x1070)
-#  include <lzoutil.h>
-#endif
+#include <lzo/lzo1x.h>
+#include <lzo/lzoutil.h>
 
-#define LZO2 1
-#undef LZO2
-
-#ifdef LZO2
 #include "tc_lzo.h"
-#endif
 
 #define MOD_NAME    "export_lzo.so"
-#define MOD_VERSION "v0.0.6 (2003-07-24)"
+#define MOD_VERSION "v0.1.0 (2005-10-15)"
 #define MOD_CODEC   "(video) LZO real-time compression | (audio) MPEG/AC3/PCM"
 
 static int verbose_flag=TC_QUIET;
@@ -129,23 +122,14 @@
       //force keyframe
       force_kf=1;
       
-#ifdef LZO2
       AVI_set_video(vob->avifile_out, vob->ex_v_width, vob->ex_v_height, vob->ex_fps, "LZO2");
-#else
-      AVI_set_video(vob->avifile_out, vob->ex_v_width, vob->ex_v_height, vob->ex_fps, "LZO1");
-#endif
 
       if (vob->avi_comment_fd>0)
 	  AVI_set_comment_fd(vob->avifile_out, vob->avi_comment_fd);
       
       if(!info_shown && verbose_flag) 
-#ifdef LZO2
 	fprintf(stderr, "[%s] codec=%s, fps=%6.3f, width=%d, height=%d\n", 
 		MOD_NAME, "LZO2", vob->ex_fps, vob->ex_v_width, vob->ex_v_height);
-#else
-	fprintf(stderr, "[%s] codec=%s, fps=%6.3f, width=%d, height=%d\n", 
-		MOD_NAME, "LZO1", vob->ex_fps, vob->ex_v_width, vob->ex_v_height);
-#endif
       
       info_shown=1;
       
@@ -183,9 +167,7 @@
 
   int key;
 
-#ifdef LZO2
   tc_lzo_header_t h;
-#endif
   
   if(param->flag == TC_VIDEO) { 
     
@@ -197,7 +179,6 @@
      * compress from `in' to `out' with LZO1X-1
      */
 
-#ifdef LZO2
     r = lzo1x_1_compress(param->buffer, param->size, out+sizeof(h), &out_len, wrkmem);
     h.magic = TC_CODEC_LZO2;
     h.size = out_len;
@@ -205,12 +186,9 @@
     h.level = 1;
     h.flags = 0;
     h.flags |= ((codec==CODEC_RGB)?TC_LZO_FORMAT_RGB24:TC_LZO_FORMAT_YV12);
+    h.pad = 0;
 
-    // XXX
     tc_memcpy (out, &h, sizeof(h));
-#else
-    r = lzo1x_1_compress(param->buffer, param->size, out, &out_len, wrkmem);
-#endif
     
     if (r == LZO_E_OK) {
       if(verbose & TC_DEBUG) printf("compressed %lu bytes into %lu bytes\n",
@@ -225,17 +203,15 @@
     /* check for an incompressible block */
     if (out_len >= param->size)  {
       if(verbose & TC_DEBUG) printf("[%s] block contains incompressible data\n", MOD_NAME);
-#ifdef LZO2
       h.flags |= TC_LZO_NOT_COMPRESSIBLE;
-#endif
+      tc_memcpy(out+sizeof(h), param->buffer, param->size);
+      out_len = param->size;
     }
     
     //0.5.0-pre8:
     key = ((param->attributes & TC_FRAME_IS_KEYFRAME) || force_kf) ? 1:0;
 
-#ifdef LZO2
     out_len += sizeof(h);
-#endif
 
     //0.6.2: switch outfile on "C" and -J pv
     //0.6.2: enforce auto-split at 2G (or user value) for normal AVI files
